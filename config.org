#+TITLE: My emacs doom configuration
#+AUTHOR: Song Pan
#+EMAIL: pan.song@dhs.sg

* Tasks
This section keeps track of what I plan to change.
** Make escape key work in vterm mode
* Configuration
** Lexical binding
Use lexical-binding. [[https://nullprogram.com/blog/2016/12/22/][Why?]]

#+BEGIN_QUOTE
Until Emacs 24.1 (June 2012), Elisp only had dynamically scoped variables,
a feature, mostly by accident, common to old lisp dialects. While dynamic
scope has some selective uses, itâ€™s widely regarded as a mistake for local
variables, and virtually no other languages have adopted it.
#+END_QUOTE

#+begin_src elisp
;;; config.el --- -*- lexical-binding: t -*-
#+end_src
** Personal details
#+begin_src elisp
(setq user-full-name "Song Pan"
      user-mail-address "pan.song@dhs.sg")
#+end_src
** Org directory
The default doom comment said this should be done before org loads. 
#+begin_src elisp
(setq org-directory "~/org/")
#+end_src
** Appearance
*** Line number
#+begin_src elisp
(setq display-line-numbers-type 'relative)
#+end_src
*** Theme
The default one.
#+begin_src elisp
(setq doom-theme 'doom-one)
#+end_src
*** Fonts
#+begin_src elisp
(setq doom-font (font-spec :family "Hack Nerd Font" :size 19 :weight 'semi-light))
#+end_src

*** Show matching paranthesis
#+begin_src elisp
(after! smartparens
  (show-smartparens-global-mode))
#+end_src
*** Org bullets
#+begin_src elisp
(use-package! org-bullets
  :after org
  :hook (org-mode . org-bullets-mode))
#+end_src
*** Ligatures
Taken from the ligatures doc.
#+begin_src elisp
(after! go-mode ; in this case the major mode and package named the same thing
  (set-ligatures! 'go-mode
    :def "func" ; function keyword
    :true "true" :false "false"
                                        ; this will replace not only definitions
                                        ; but coresponding functions aswell
    :int "int" :str "string"
    :float "float" :bool "bool"
    :for "for"
    :return "return" :yeild "yeild"))

(set-ligatures! 'MAJOR-MODE
  ;; Functional
  :lambda        "lambda keyword"
  :def           "function keyword"
  :composition   "composition"
  :map           "map/dictionary keyword"
  ;; Types
  :null          "null type"
  :true          "true keyword"
  :false         "false keyword"
  :int           "int keyword"
  :float         "float keyword"
  :str           "string keyword"
  :bool          "boolean keywork"
  :list          "list keyword"
  ;; Flow
  :not           "not operator"
  :in            "in operator"
  :not-in        "not in operator"
  :and           "and keyword"
  :or            "or keyword"
  :for           "for keyword"
  :some          "some keyword"
  :return        "return"
  :yield         "yeild"
  ;; Other
  :union         "Union keyword"
  :intersect     "Intersect keyword"
  :diff          "diff keyword"
  :tuple         "Tuple Keyword "
  :pipe          "Pipe Keyword" ;; FIXME: find a non-private char
  :dot           "Dot operator")
#+end_src

*** Magit "gravatars"
Some random things I saw online. Not sure what it does actually.
#+begin_src elisp
(setq magit-revision-show-gravatars '("^Author:     " . "^Commit:     "))
#+end_src
** Editing experience
*** Escape key
I am used to "fd". The only inconvenience I found is for variable name for
file descriptor. Luckily I don't write C that much. 
#+begin_src elisp
(after! evil-escape
  (setq evil-escape-key-sequence "fd"))
#+end_src
*** Undo limit
#+begin_src elisp
(setq undo-limit 80000000)
#+end_src
*** Treat CamelCase as multiple words
#+begin_src elisp
(global-subword-mode 1)
#+end_src
*** Default to org mode
#+begin_src elisp
(setq-default major-mode 'org-mode)
#+end_src
*** Auto wrap
#+begin_src elisp
(after! adaptive-wrap
  (+global-word-wrap-mode +1))
#+end_src
** Moving around faster
*** Preview ivy buffers
#+begin_src elisp
(setq +ivy-buffer-preview t)
#+end_src
*** Display path in ivy-rich.
Ivy-rich has a [[https://github.com/Yevgnen/ivy-rich/issues/53][bug/feature]] that doesn't show a buffer's path if projectile
is enabled but the buffer is not in a project. This is a workaround to
fallback to absolute path in that case.
#+begin_src elisp
(after! ivy-rich
  (setq ivy-rich-path-style 'abbrev)
  (defadvice! ivy-rich-no-project-fallback (orig-fn candidate)
    :around #'ivy-rich--switch-buffer-root-and-filename
    (if-let ((result (funcall orig-fn candidate)))
        result
      (cons ""
            (expand-file-name (ivy-rich--switch-buffer-directory candidate))))))
#+end_src
*** Do not display ".." in find file.
"." might still be useful for dired here.
#+begin_src elisp
(setq ivy-extra-directories '("."))
#+end_src
*** Disable projectile cache
Fd is fast enough and the projectile is usually [[https://github.com/hlissner/doom-emacs/pull/3376][not updated]].
#+begin_src elisp
(after! projectile
  (setq projectile-enable-caching (not (executable-find doom-projectile-fd-binary))))
#+end_src
** Editor flow optimisation
*** Do not prompt "keep others" when manually saving
When saving perspectives, it always prompt me if I wanna keep others in
the same file. Yes I do. This is a failed attempt to always put =t= to
=keep-others=.
#+begin_src elisp
;; (defadvice! always-keep-others-when-saving-perspective (&optional fname phash name keep-others &rest rest-args)
;;   :filter-args #'persp-save-to-file-by-names
;;   '(fname phash name t rest-args))
#+end_src
*** Don't bother confirming killing process
#+begin_src elisp
(after! files
  (setq confirm-kill-processes nil))
#+end_src
** Features
*** Magit Forge setup
Note we need to follow [[https://magit.vc/manual/forge/Getting-Started.html#Getting-Started][forge manual]] to setup the token. Then use =M-x
forge-pull= to fetch the original repo.
#+begin_src elisp
(setq auth-sources '("~/.authinfo"))
#+end_src
*** Email
#+begin_src elisp
;; Each path is relative to `+mu4e-mu4e-mail-path', which is ~/.mail by default
(set-email-account! "DHS"
                    '((mu4e-sent-folder       . "/DHS/Sent Mail")
                      (mu4e-drafts-folder     . "/DHS/Drafts")
                      (mu4e-trash-folder      . "/DHS/Trash")
                      (mu4e-refile-folder     . "/DHS/All Mail")
                      (smtpmail-smtp-user     . "pan.song@dhs.sg")
                      (mu4e-compose-signature . "---\nSong Pan"))
                    t)
(after! mu4e
  (setq mu4e-bookmarks
        '((:name "Unread messages" :query "flag:unread AND NOT flag:trashed AND maildir:/dhs/Inbox" :key 117)
          (:name "Today's messages" :query "date:today..now AND maildir:/dhs/Inbox" :key 116)
          (:name "Last 7 days" :query "date:7d..now AND maildir:/dhs/Inbox" :hide-unread t :key 119)
          (:name "Messages with images" :query "mime:image/* AND maildir:/dhs/Inbox" :key 112)))
  (setq mu4e-headers-include-related nil)
  (setq mu4e-update-interval 300)
  (setq mu4e-use-fancy-chars t)
  (setq mu4e-view-show-addresses t)
  (setq mu4e-view-show-images t)
  )
#+end_src
Attempt to get Gmail citation format (not working currently).
#+begin_src elisp
(after! message
  (setq message-cite-style message-cite-style-gmail)
  (setq message-citation-line-format "On %d %b %Y at %R, %f wrote:\n")
  (setq message-citation-line-function 'message-insert-formatted-citation-line)
  )
#+end_src
** Custom Keybindings
*** Local leader
=SPC M= is too long.
#+begin_src elisp
(setq doom-localleader-key ",")
(setq doom-localleader-alt-key "M-,")
#+end_src
*** SPC TAB TAB switch workspace
#+begin_src elisp
(map! :leader
      (:when (featurep! :ui workspaces)
       (:prefix-map ("TAB" . "workspace")
        :desc "Switch workspace" "TAB" #'+workspace/switch-to)))
#+end_src
*** Window splitting
I like to use =-= to mean horizontal split and =/= to mean vertial.
#+begin_src elisp
(after! evil
  (define-key evil-window-map "/" 'evil-window-vsplit)
  (define-key evil-window-map "-" 'evil-window-split))
#+end_src
=SPC w -= was mapped to something else so we preserve it by remapping it
to =SPC w C--=
#+begin_src elisp
(define-key evil-window-map (kbd "C--") 'evil-window-decrease-height)
#+end_src
** Other
*** Auto save every buffer
#+begin_src elisp
(setq auto-save-default t)
#+end_src
*** Auto revert buffers from disk
Also checks version contorl info, whatever that means.
#+begin_src elisp
(use-package! autorevert
  :config
  (global-auto-revert-mode 1)
  (setq auto-revert-check-vc-info t))
#+end_src
*** Auto save when emacs is out of focus
Taken from[[http://ergoemacs.org/emacs/emacs_auto_save.html][ Emacs auto save]] 
#+begin_src elisp
(defun xah-save-all-unsaved ()
  "Save all unsaved files. no ask.
Version 2019-11-05"
  (interactive)
  (save-some-buffers t))

;; when switching out of emacs, all unsaved files will be saved
(add-hook 'focus-out-hook 'xah-save-all-unsaved)
#+end_src
*** Fish
#+begin_src emacs-lisp :tangle yes
(use-package! fish-mode)
#+end_src
#+end_src
* Notes
This section contains things that took me some time to investigate.
** Making magit push to github directly using ssh key
See [[file:other/ssh_config.org::*Github access][Github access]].

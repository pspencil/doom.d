#+TITLE: My .bashrc
#+PROPERTY: header-args :tangle ~/.bashrc :tangle-mode (identity #o644) 

* If not running interactively, quit.
I am actually not sure how useful this is.
#+begin_src shell
[ -z "$PS1" ] && return
#+end_src
* Set PATH
Some common bin directories I usually have.
#+begin_src shell
path=/usr/bin:/usr/local/bin:/bin:/usr/local/sbin
candidates=(
    /usr/lib/jvm/default/bin
    /opt/google/chrome
    ~/bin
    ~/go/bin
    ~/matlab/bin
    ~/.gem/ruby/2.7.0/bin
)
for dir in "${candidates[@]}"; do
    [[ -d $dir ]] && path=$path:$dir
done
export PATH=$path    
#+end_src
* Load aliases, if exists.
See [[file:alias.org][aliases]].
#+begin_src shell
[[ -f ~/.bash_alias ]] && . ~/.bash_alias
#+end_src
* Start ssh agent
#+begin_src shell
SSH_ENV="$HOME/.ssh/environment"
function start_agent {
    echo "Initialising new SSH agent..."
    /usr/bin/ssh-agent | sed 's/^echo/#echo/' > "${SSH_ENV}"
    echo succeeded
    chmod 600 "${SSH_ENV}"
    . "${SSH_ENV}" > /dev/null
    for f in ~/.ssh/*.pub; do
        ssh-add "${f%.pub}";
    done
}

if [ -f "${SSH_ENV}" ]; then
    . "${SSH_ENV}" > /dev/null
    #ps ${SSH_AGENT_PID} doesn't work under cywgin
    ps -ef | grep ${SSH_AGENT_PID} | grep ssh-agent$ > /dev/null || {
        start_agent;
    }
else
    start_agent;
fi
#+end_src
* Terminal History
Probably not needed if we use tmux. But let's set it anyway.
#+begin_src shell
export HISTCONTROL=ignoredups:erasedups  # no duplicate entries
export HISTSIZE=100000                   # big big history
export HISTFILESIZE=100000               # big big history
export PROMPT_COMMAND="history -a; history -n"
#+end_src
* Shell options
check the window size after each command and, if necessary, update the values of
LINES and COLUMNS.
#+begin_src shell
shopt -s checkwinsize
#+end_src
Allow stuff like =**/*=.
#+begin_src shell
shopt -s globstar
#+end_src
Append to history.
#+begin_src shell
shopt -s histappend                       
#+end_src
* Prompt
Copied from one of the previous Ubuntu defaults.
#+begin_src shell
# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color)
        color_prompt=yes;;
    xterm*|rxvt*)
        PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
        ;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	    # We have color support; assume it's compliant with Ecma-48
	    # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	    # a case would tend to support setf rather than setaf.)
	    color_prompt=yes
    else
	    color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
#+end_src
* Color in =ls= and =grep=
#+begin_src shell
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi
#+end_src
* Application specific things
** fasd
#+begin_src shell
[[ ! -z $(which fasd) ]] && eval "$(fasd --init auto)"
#+end_src

** Golang settings
#+begin_src shell
[[ -d ~/go ]] && export GOPATH=$HOME/go
#+end_src
** OCaml settings
Setup OPAM
#+begin_src shell
[[ -f ~/.opam/opam-init/init.sh ]] && . ~/.opam/opam-init/init.sh > /dev/null 2> /dev/null
#+end_src
** Undistract me settings
#+begin_src shell
if [[ -f "/etc/profile.d/undistract-me.sh" ]]
then
    export UDM_PLAY_SOUND=1
    source /etc/profile.d/undistract-me.sh
fi
#+end_src
** Lesspipe
make less more friendly for non-text input files, see [[https://www.commandlinux.com/man-page/man1/lesspipe.1.html][lesspipe(1)]]
#+begin_src shell
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"
#+end_src
* Fish
My fish config is [[https://github.com/pspencil/fish-config][here]] in a separate repository because I might change it with
the GUI ~fish_config~.
#+begin_src shell
if [[ $(ps --no-header --pid=$PPID --format=cmd) != "fish" ]]
then
	exec fish
fi
#+end_src

